/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

description = 'Ballerina - Azure Service Bus Examples'

def packageName = "asb"
def filePath = project.fileTree("${project.projectDir}")
def examples = filePath.matching {
    include("**/*.bal")
    exclude("**/deprecated/**/*.bal")
}

def executeBalCommand(String command, String dir) {
    try {
        exec {
            workingDir dir
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "bal.bat ${command} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "bal ${command}"
            }
        }
    } catch (Exception e) {
        println("bal command failed. " + e.message)
        throw e
    }
}

task testExamples {
    dependsOn ":${packageName}-ballerina:build"

    doLast {
        examples.each { example ->  executeBalCommand ("run ${example}", "${project.rootDir}") }
    }
}

task buildExamples {
    dependsOn ":${packageName}-ballerina:build"
    
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-examples:test")) {
            buildExamples.enabled = false
        } else {
            testExamples.enabled = false
        }
    }
    doLast {
        // TODO: Enabled --offline due to a bug in pulling incorrect versions from the central repository.
        examples.each { example ->  executeBalCommand ("build --offline ${example}", "${project.rootDir}") }
    }
}

test.dependsOn testExamples
build.dependsOn buildExamples
